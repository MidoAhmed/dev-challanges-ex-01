{"version":3,"file":"components-Button-Button-stories.4af4b32f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAgCA;;AAmBA;;AAGA;;;;;;;;AAcA;;;;;;;;;AAaA;;;;;;;;AAaA;;;;;;;;AAWA;;;;;;;;AAWA;;;;;;;;AAwBA;;AAGA;;;;;;AA+FA","sources":["webpack://@MidoAhmed/rollup-react-library-starter/./src/components/Button/Button.tsx"],"sourcesContent":["import React, { ComponentPropsWithoutRef, PropsWithChildren } from \"react\";\nimport styled, { css } from \"styled-components\";\n\ninterface ButtonStyledProps {\n  variant?: \"default\" | \"text\" | \"outline\";\n  disableShadow?: boolean;\n  color?: \"default\" | \"primary\" | \"secondary\" | \"danger\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  startIcon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n}\n\nexport interface ButtonProps\n  extends Omit<ComponentPropsWithoutRef<\"button\">, \"color\">,\n    PropsWithChildren<ButtonStyledProps> {\n  as?: React.ElementType;\n}\n\nconst StyledButton = styled.button<ButtonStyledProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  text-align: center;\n  font-family: Noto Sans JP;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  border-radius: 6px;\n  cursor: pointer;\n\n  padding: ${({ size }) => {\n    switch (size) {\n      case \"sm\":\n        return \"6px 12px\";\n        break;\n\n      case \"md\":\n        return \"8px 16px\";\n        break;\n\n      case \"lg\":\n        return \"11px 22px\";\n        break;\n\n      default:\n        return \"8px 16px\";\n    }\n  }};\n\n  box-shadow: ${({ disableShadow }) =>\n    disableShadow ? \"none\" : \"0px 2px 3px 0px rgba(51, 51, 51, 0.2)\"};\n\n  ${({ variant, color }) => {\n    switch (variant) {\n      case \"outline\":\n        return css`\n          background-color: transparent;\n          border: 1px solid #3d5afe;\n          color: #3d5afe;\n          &:hover:not([disabled]),\n          &:focus:not([disabled]) {\n            background-color: rgba(41, 98, 255, 0.1);\n          }\n        `;\n        break;\n\n      case \"text\":\n        return css`\n          background: none;\n          border: none;\n          color: #3d5afe;\n          box-shadow: none;\n          &:hover:not([disabled]),\n          &:focus:not([disabled]) {\n            background-color: rgba(41, 98, 255, 0.1);\n          }\n        `;\n        break;\n\n      default:\n        switch (color) {\n          case \"default\":\n            return css`\n              background-color: #e0e0e0;\n              border: 1px solid #e0e0e0;\n              color: #3f3f3f;\n              &:hover:not([disabled]),\n              &:focus:not([disabled]) {\n                background-color: #aeaeae;\n              }\n            `;\n            break;\n          case \"primary\":\n            return css`\n              background-color: #2962ff;\n              border: 1px solid #2962ff;\n              color: #fff;\n              &:hover:not([disabled]),\n              &:focus:not([disabled]) {\n                background-color: #0039cb;\n              }\n            `;\n            break;\n          case \"secondary\":\n            return css`\n              background-color: #455a64;\n              border: 1px solid #455a64;\n              color: #fff;\n              &:hover:not([disabled]),\n              &:focus:not([disabled]) {\n                background-color: #1c313a;\n              }\n            `;\n            break;\n          case \"danger\":\n            return css`\n              background-color: #d32f2f;\n              border: 1px solid #d32f2f;\n              color: #fff;\n              &:hover:not([disabled]),\n              &:focus:not([disabled]) {\n                background-color: #9a0007;\n              }\n            `;\n            break;\n          default:\n            return css`\n              background-color: #e0e0e0;\n              border: 1px solid #e0e0e0;\n              color: #3f3f3f;\n              &:hover:not([disabled]),\n              &:focus:not([disabled]) {\n                background-color: #aeaeae;\n              }\n            `;\n        }\n\n        break;\n    }\n  }}\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      background-color: #e0e0e0;\n      cursor: not-allowed;\n      color: #9e9e9e;\n      border: 1px solid #e0e0e0;\n    `}\n`;\n\n/**\n * Button UI component for user interaction\n *\n * @param {ButtonProps} props\n * @returns {React.ReactElement}\n * @constructor\n * @see https://storybook.js.org/docs/react/writing-stories/introduction\n * @example\n * import { Button } from 'components/Button';\n *\n * export const Primary = () => <Button variant=\"primary\">Primary</Button>;\n *\n * export const Secondary = () => <Button variant=\"secondary\">Secondary</Button>;\n *\n * export const Danger = () => <Button variant=\"danger\">Danger</Button>;\n *\n * export const Success = () => <Button variant=\"success\">Success</Button>;\n *\n * export const Warning = () => <Button variant=\"warning\">Warning</Button>;\n *\n * export const Info = () => <Button variant=\"info\">Info</Button>;\n *\n * export const Light = () => <Button variant=\"light\">Light</Button>;\n *\n * export const Dark = () => <Button variant=\"dark\">Dark</Button>;\n *\n * export const Link = () => <Button variant=\"link\">Link</Button>;\n *\n * export const OutlinePrimary = () => <Button variant=\"outline-primary\">Outline Primary</Button>;\n *\n * export const OutlineSecondary = () => <Button variant=\"outline-secondary\">Outline Secondary</Button>;\n *\n * export const OutlineDanger = () => <Button variant=\"outline-danger\">Outline Danger</Button>;\n *\n * export const OutlineSuccess = () => <Button variant=\"outline-success\">Outline Success</Button>;\n *\n * export const OutlineWarning = () => <Button variant=\"outline-warning\">Outline Warning</Button>;\n *\n * export const OutlineInfo = () => <Button variant=\"outline-info\">Outline Info</Button>;\n *\n * export const OutlineLight = () => <Button variant=\"outline-light\">Outline Light</Button>;\n *\n * export const OutlineDark = () => <Button variant=\"outline-dark\">Outline Dark</Button>;\n *\n * export const OutlineLink = () => <Button variant=\"outline-link\">Outline Link</Button>;\n *\n * export const TextPrimary = () => <Button variant=\"text-primary\">Text Primary</Button>;\n *\n * export const TextSecondary = () => <Button variant=\"text-secondary\">Text Secondary</Button>;\n *\n *  export const TextDanger = () => <Button variant=\"text-danger\">Text Danger</Button>;\n *\n * export const TextSuccess = () => <Button variant=\"text-success\">Text Success</Button>;\n *\n * export const TextWarning = () => <Button variant=\"text-warning\">Text Warning</Button>;\n *\n * export const TextInfo = () => <Button variant=\"text-info\">Text Info</Button>;\n *\n * export const TextLight = () => <Button variant=\"text-light\">Text Light</Button>;\n *\n * export const TextDark = () => <Button variant=\"text-dark\">Text Dark</Button>;\n *\n * export const TextLink = () => <Button variant=\"text-link\">Text Link</Button>;\n *\n * export const Disabled = () => <Button variant=\"primary\" disabled>Disabled</Button>;\n *\n * export const Sizes = () => (\n *  <>\n *   <Button variant=\"primary\" size=\"sm\">Small</Button>\n *  <Button variant=\"primary\" size=\"md\">Medium</Button>\n * <Button variant=\"primary\" size=\"lg\">Large</Button>\n * </>\n * );\n *\n *\n * export const WithIcon = () => (\n * <>\n *  <Button variant=\"primary\" startIcon={<span className=\"material-icons\">face</span>}>Start Icon</Button>\n * <Button variant=\"primary\" endIcon={<span className=\"material-icons\">face</span>}>End Icon</Button>\n * </>\n * );\n *\n * export const DisableShadow = () => <Button variant=\"primary\" disableShadow>Disable Shadow</Button>;\n *\n */\nconst Button: React.FC<ButtonProps> = ({\n  variant = \"default\",\n  color = \"default\",\n  size = \"md\",\n  disableShadow = false,\n  startIcon,\n  endIcon,\n  children,\n  ...props\n}) => {\n  return (\n    <StyledButton\n      variant={variant}\n      disableShadow={disableShadow}\n      color={color}\n      size={size}\n      {...props}\n    >\n      {startIcon && startIcon}\n      {children}\n      {endIcon && endIcon}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n"],"names":[],"sourceRoot":""}